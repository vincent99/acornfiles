args: {
  // Number of NGINX instances to run
  replicas: 1

  // URL to redirect to
  target: ""

  // Set to true to return permanent redirect (301) instead of temporary (302)
  permanent: false
}

containers: web: {
  image:  "nginx"
  scale:  args.replicas
  ports: publish: "80/http"

  files: {
    "/etc/nginx/nginx.conf": "secret://nginx-conf/template"
  }

  dirs: {
    "/etc/nginx/conf.d": "secret://nginx-server-blocks"
  }
}

secrets: {
  "nginx-conf": {
    type: "template"
    data: {
      template: """
          user  nginx;
          worker_processes  auto;

          error_log  /var/log/nginx/error.log notice;
          pid    /var/run/nginx.pid;

          events {
            worker_connections  1024;
          }

          http {
            include     /etc/nginx/mime.types;
            default_type  application/octet-stream;

            log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

            access_log  /var/log/nginx/access.log  main;

            sendfile    on;
            #tcp_nopush   on;

            keepalive_timeout  65;

            #gzip  on;

            include /etc/nginx/conf.d/*.conf;
          }
        """
    }
  }

  "nginx-server-blocks": {
    type: "opaque"
    data: {
      "default.conf": """
        server {
            listen     80;
            listen  [::]:80;
            server_name  localhost;

            location / {
              root   /usr/share/nginx/html;
              index  index.html index.htm;

              rewrite ^ "\(args.target)"  \(std.ifelse(args.permanent, "permanent", ""));
            }

            # redirect server error pages to the static page /50x.html
            #
            error_page   500 502 503 504  /50x.html;
            location = /50x.html {
              root   /usr/share/nginx/html;
            }
        }
        """
    }
  }
}
